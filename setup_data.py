{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "05299563-c78c-47ee-ba31-81941e51f01b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import shutil\n",
    "import random\n",
    "from pathlib import Path\n",
    "\n",
    "def create_directory_structure():\n",
    "    \"\"\"Crear la estructura de directorios necesaria\"\"\"\n",
    "    directories = [\n",
    "        'melanoma_cancer_dataset/train/benign',\n",
    "        'melanoma_cancer_dataset/train/malignant',\n",
    "        'melanoma_cancer_dataset/test/benign',\n",
    "        'melanoma_cancer_dataset/test/malignant'\n",
    "    ]\n",
    "    \n",
    "    for directory in directories:\n",
    "        Path(directory).mkdir(parents=True, exist_ok=True)\n",
    "        print(f\"Directorio creado: {directory}\")\n",
    "\n",
    "def organize_images(source_train_dir, source_test_dir):\n",
    "    \"\"\"\n",
    "    Organizar las imágenes en la estructura correcta\n",
    "    \n",
    "    Args:\n",
    "        source_train_dir: Directorio con las imágenes de entrenamiento\n",
    "        source_test_dir: Directorio con las imágenes de test\n",
    "    \"\"\"\n",
    "    \n",
    "    print(\"Organizando imágenes...\")\n",
    "    \n",
    "    # Verificar estructura final\n",
    "    verify_data_structure()\n",
    "    \n",
    "    print(\"\\n=== CONFIGURACIÓN COMPLETADA ===\")\n",
    "    print(\"Próximos pasos:\")\n",
    "    print(\"1. Ejecuta 'python train_model.py' para entrenar el modelo\")\n",
    "    print(\"2. Ejecuta 'streamlit run app.py' para la aplicación web\")\n",
    "    print(\"3. Sube tu proyecto a GitHub para deployment\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main() Estructura esperada en directorio fuente:\n",
    "    # source_train_dir/\n",
    "    #   ├── benign/     (3000 imágenes)\n",
    "    #   └── malignant/  (3000 imágenes)\n",
    "    #\n",
    "    # source_test_dir/\n",
    "    #   ├── benign/     (500 imágenes)\n",
    "    #   └── malignant/  (500 imágenes)\n",
    "    \n",
    "    # Copiar imágenes de entrenamiento\n",
    "    if os.path.exists(source_train_dir):\n",
    "        for class_name in ['benign', 'malignant']:\n",
    "            src_path = os.path.join(source_train_dir, class_name)\n",
    "            dst_path = f'data/train/{class_name}'\n",
    "            \n",
    "            if os.path.exists(src_path):\n",
    "                images = [f for f in os.listdir(src_path) \n",
    "                         if f.lower().endswith(('.png', '.jpg', '.jpeg'))]\n",
    "                \n",
    "                print(f\"Copiando {len(images)} imágenes {class_name} de entrenamiento...\")\n",
    "                \n",
    "                for img in images:\n",
    "                    src_file = os.path.join(src_path, img)\n",
    "                    dst_file = os.path.join(dst_path, img)\n",
    "                    shutil.copy2(src_file, dst_file)\n",
    "    \n",
    "    # Copiar imágenes de test\n",
    "    if os.path.exists(source_test_dir):\n",
    "        for class_name in ['benign', 'malignant']:\n",
    "            src_path = os.path.join(source_test_dir, class_name)\n",
    "            dst_path = f'data/test/{class_name}'\n",
    "            \n",
    "            if os.path.exists(src_path):\n",
    "                images = [f for f in os.listdir(src_path) \n",
    "                         if f.lower().endswith(('.png', '.jpg', '.jpeg'))]\n",
    "                \n",
    "                print(f\"Copiando {len(images)} imágenes {class_name} de test...\")\n",
    "                \n",
    "                for img in images:\n",
    "                    src_file = os.path.join(src_path, img)\n",
    "                    dst_file = os.path.join(dst_path, img)\n",
    "                    shutil.copy2(src_file, dst_file)\n",
    "\n",
    "def verify_data_structure():\n",
    "    \"\"\"Verificar que la estructura de datos esté correcta\"\"\"\n",
    "    print(\"\\n=== VERIFICACIÓN DE DATOS ===\")\n",
    "    \n",
    "    required_dirs = [\n",
    "      'melanoma_cancer_dataset/train/benign',\n",
    "        'melanoma_cancer_dataset/train/malignant',\n",
    "        'melanoma_cancer_dataset/test/benign',\n",
    "        'melanoma_cancer_dataset/test/malignant'\n",
    "    ]\n",
    "    \n",
    "    total_images = 0\n",
    "    \n",
    "    for directory in required_dirs:\n",
    "        if os.path.exists(directory):\n",
    "            images = [f for f in os.listdir(directory) \n",
    "                     if f.lower().endswith(('.png', '.jpg', '.jpeg'))]\n",
    "            count = len(images)\n",
    "            total_images += count\n",
    "            print(f\"✅ {directory}: {count} imágenes\")\n",
    "        else:\n",
    "            print(f\"❌ {directory}: No existe\")\n",
    "    \n",
    "    print(f\"\\nTotal de imágenes: {total_images}\")\n",
    "    \n",
    "    # Verificar distribución esperada\n",
    "    expected_counts = {\n",
    "        'melanoma_cancer_dataset/train/benign': 3000,\n",
    "        'melanoma_cancer_dataset/train/malignant': 3000,\n",
    "        'melanoma_cancer_dataset/test/benign': 500,\n",
    "        'melanoma_cancer_dataset/test/malignant': 500\n",
    "    }\n",
    "    \n",
    "    print(\"\\n=== VERIFICACIÓN DE CANTIDADES ===\")\n",
    "    for directory, expected in expected_counts.items():\n",
    "        if os.path.exists(directory):\n",
    "            actual = len([f for f in os.listdir(directory) \n",
    "                         if f.lower().endswith(('.png', '.jpg', '.jpeg'))])\n",
    "            status = \"✅\" if actual == expected else \"⚠️\"\n",
    "            print(f\"{status} {directory}: {actual}/{expected} imágenes\")\n",
    "\n",
    "def main():\n",
    "    \"\"\"Función principal para configurar los datos\"\"\"\n",
    "    print(\"=== CONFIGURACIÓN DE DATOS PARA DETECCIÓN DE CÁNCER DE PIEL ===\\n\")\n",
    "    \n",
    "    # Crear estructura de directorios\n",
    "    create_directory_structure()\n",
    "    \n",
    "    # Solicitar rutas de los directorios fuente\n",
    "    print(\"\\nPor favor, proporciona las rutas de tus directorios de imágenes:\")\n",
    "    print(\"Estructura esperada:\")\n",
    "    print(\"  entrenamiento/\")\n",
    "    print(\"    ├── benign/     (3000 imágenes)\")\n",
    "    print(\"    └── malignant/  (3000 imágenes)\")\n",
    "    print(\"  test/\")\n",
    "    print(\"    ├── benign/     (500 imágenes)\")\n",
    "    print(\"    └── malignant/  (500 imágenes)\")\n",
    "    \n",
    "    source_train = input(\"\\nRuta del directorio de entrenamiento: \").strip()\n",
    "    source_test = input(\"Ruta del directorio de test: \").strip()\n",
    "    \n",
    "    # Organizar imágenes\n",
    "    if source_train and source_test:\n",
    "        organize_images(source_train, source_test)\n",
    "    else:\n",
    "        print(\"⚠️ Las rutas no fueron proporcionadas. Creando estructura vacía.\")\n",
    "    \n",
    "    #"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
