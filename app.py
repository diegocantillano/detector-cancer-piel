{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "de11b7a2-ded5-451f-88d1-b3e7a6093941",
   "metadata": {},
   "outputs": [],
   "source": [
    "import streamlit as st\n",
    "import tensorflow as tf\n",
    "from tensorflow.keras.models import load_model\n",
    "from PIL import Image\n",
    "import numpy as np\n",
    "import cv2\n",
    "import io\n",
    "import base64\n",
    "from datetime import datetime\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# Configuraci√≥n de la p√°gina\n",
    "st.set_page_config(\n",
    "    page_title=\"Detector de C√°ncer de Piel\",\n",
    "    page_icon=\"üî¨\",\n",
    "    layout=\"wide\",\n",
    "    initial_sidebar_state=\"expanded\"\n",
    ")\n",
    "\n",
    "# Estilos CSS personalizados\n",
    "st.markdown(\"\"\"\n",
    "<style>\n",
    "    .main-header {\n",
    "        font-size: 3rem;\n",
    "        color: #1f77b4;\n",
    "        text-align: center;\n",
    "        margin-bottom: 2rem;\n",
    "    }\n",
    "    .sub-header {\n",
    "        font-size: 1.5rem;\n",
    "        color: #ff7f0e;\n",
    "        margin-bottom: 1rem;\n",
    "    }\n",
    "    .result-box {\n",
    "        padding: 1rem;\n",
    "        border-radius: 10px;\n",
    "        margin: 1rem 0;\n",
    "    }\n",
    "    .benign-result {\n",
    "        background-color: #d4edda;\n",
    "        border: 1px solid #c3e6cb;\n",
    "        color: #155724;\n",
    "    }\n",
    "    .malignant-result {\n",
    "        background-color: #f8d7da;\n",
    "        border: 1px solid #f5c6cb;\n",
    "        color: #721c24;\n",
    "    }\n",
    "    .info-box {\n",
    "        background-color: #d1ecf1;\n",
    "        border: 1px solid #bee5eb;\n",
    "        color: #0c5460;\n",
    "        padding: 1rem;\n",
    "        border-radius: 5px;\n",
    "        margin: 1rem 0;\n",
    "    }\n",
    "</style>\n",
    "\"\"\", unsafe_allow_html=True)\n",
    "\n",
    "class SkinCancerDetector:\n",
    "    def __init__(self, model_path='skin_cancer_model.h5'):\n",
    "        self.model = None\n",
    "        self.model_path = model_path\n",
    "        self.img_size = (224, 224)\n",
    "        self.load_model()\n",
    "    \n",
    "    @st.cache_resource\n",
    "    def load_model(_self):\n",
    "        \"\"\"Cargar el modelo entrenado\"\"\"\n",
    "        try:\n",
    "            _self.model = load_model(_self.model_path)\n",
    "            return True\n",
    "        except Exception as e:\n",
    "            st.error(f\"Error al cargar el modelo: {str(e)}\")\n",
    "            return False\n",
    "    \n",
    "    def preprocess_image(self, image):\n",
    "        \"\"\"Preprocesar la imagen para el modelo\"\"\"\n",
    "        try:\n",
    "            # Convertir a RGB si es necesario\n",
    "            if image.mode != 'RGB':\n",
    "                image = image.convert('RGB')\n",
    "            \n",
    "            # Redimensionar\n",
    "            image = image.resize(self.img_size)\n",
    "            \n",
    "            # Convertir a array numpy\n",
    "            img_array = np.array(image)\n",
    "            \n",
    "            # Normalizar\n",
    "            img_array = img_array / 255.0\n",
    "            \n",
    "            # Expandir dimensiones para el batch\n",
    "            img_array = np.expand_dims(img_array, axis=0)\n",
    "            \n",
    "            return img_array\n",
    "        except Exception as e:\n",
    "            st.error(f\"Error al procesar la imagen: {str(e)}\")\n",
    "            return None\n",
    "    \n",
    "    def predict(self, image):\n",
    "        \"\"\"Hacer predicci√≥n sobre la imagen\"\"\"\n",
    "        if self.model is None:\n",
    "            return None, None\n",
    "        \n",
    "        try:\n",
    "            # Preprocesar imagen\n",
    "            processed_image = self.preprocess_image(image)\n",
    "            if processed_image is None:\n",
    "                return None, None\n",
    "            \n",
    "            # Hacer predicci√≥n\n",
    "            prediction = self.model.predict(processed_image)\n",
    "            confidence = float(prediction[0][0])\n",
    "            \n",
    "            # Interpretar resultado\n",
    "            if confidence > 0.5:\n",
    "                result = \"Maligno\"\n",
    "                risk_level = \"Alto\"\n",
    "            else:\n",
    "                result = \"Benigno\"\n",
    "                risk_level = \"Bajo\"\n",
    "            \n",
    "            return result, confidence, risk_level\n",
    "        except Exception as e:\n",
    "            st.error(f\"Error en la predicci√≥n: {str(e)}\")\n",
    "            return None, None, None\n",
    "\n",
    "def main():\n",
    "    # T√≠tulo principal\n",
    "    st.markdown('<h1 class=\"main-header\">üî¨ Detector de C√°ncer de Piel</h1>', unsafe_allow_html=True)\n",
    "    \n",
    "    # Informaci√≥n sobre la aplicaci√≥n\n",
    "    st.markdown(\"\"\"\n",
    "    <div class=\"info-box\">\n",
    "        <h3>‚ÑπÔ∏è Informaci√≥n Importante</h3>\n",
    "        <p>Esta aplicaci√≥n utiliza inteligencia artificial para analizar im√°genes de lunares y lesiones cut√°neas, \n",
    "        ayudando en la detecci√≥n temprana de melanomas. Sin embargo, <strong>NO reemplaza el diagn√≥stico m√©dico profesional</strong>.</p>\n",
    "        <p><strong>Siempre consulte con un dermat√≥logo para un diagn√≥stico definitivo.</strong></p>\n",
    "    </div>\n",
    "    \"\"\", unsafe_allow_html=True)\n",
    "    \n",
    "    # Inicializar el detector\n",
    "    detector = SkinCancerDetector()\n",
    "    \n",
    "    # Sidebar con informaci√≥n\n",
    "    with st.sidebar:\n",
    "        st.markdown('<h2 class=\"sub-header\">üìã Instrucciones</h2>', unsafe_allow_html=True)\n",
    "        st.markdown(\"\"\"\n",
    "        1. **Suba una imagen** de la lesi√≥n cut√°nea\n",
    "        2. **Aseg√∫rese** de que la imagen sea clara y bien iluminada\n",
    "        3. **Revise** el resultado de la predicci√≥n\n",
    "        4. **Consulte** con un m√©dico especialista\n",
    "        \"\"\")\n",
    "        \n",
    "        st.markdown('<h2 class=\"sub-header\">‚ö†Ô∏è Limitaciones</h2>', unsafe_allow_html=True)\n",
    "        st.markdown(\"\"\"\n",
    "        - Solo para fines educativos\n",
    "        - Precisi√≥n limitada\n",
    "        - No reemplaza diagn√≥stico m√©dico\n",
    "        - Requiere im√°genes de alta calidad\n",
    "        \"\"\")\n",
    "        \n",
    "        st.markdown('<h2 class=\"sub-header\">üìä Estad√≠sticas del Modelo</h2>', unsafe_allow_html=True)\n",
    "        st.markdown(\"\"\"\n",
    "        - **Datos de entrenamiento**: 6,000 im√°genes\n",
    "        - **Datos de prueba**: 1,000 im√°genes\n",
    "        - **Arquitectura**: CNN profunda\n",
    "        - **Precisi√≥n estimada**: ~85-90%\n",
    "        \"\"\")\n",
    "    \n",
    "    # √Årea principal de la aplicaci√≥n\n",
    "    col1, col2 = st.columns([1, 1])\n",
    "    \n",
    "    with col1:\n",
    "        st.markdown('<h2 class=\"sub-header\">üì§ Subir Imagen</h2>', unsafe_allow_html=True)\n",
    "        \n",
    "        uploaded_file = st.file_uploader(\n",
    "            \"Seleccione una imagen de la lesi√≥n cut√°nea\",\n",
    "            type=['jpg', 'jpeg', 'png'],\n",
    "            help=\"Formatos soportados: JPG, JPEG, PNG\"\n",
    "        )\n",
    "        \n",
    "        if uploaded_file is not None:\n",
    "            # Mostrar imagen original\n",
    "            image = Image.open(uploaded_file)\n",
    "            st.image(image, caption=\"Imagen cargada\", use_column_width=True)\n",
    "            \n",
    "            # Informaci√≥n de la imagen\n",
    "            st.write(f\"**Tama√±o original:** {image.size}\")\n",
    "            st.write(f\"**Formato:** {image.format}\")\n",
    "            st.write(f\"**Modo:** {image.mode}\")\n",
    "    \n",
    "    with col2:\n",
    "        st.markdown('<h2 class=\"sub-header\">üîç Resultado del An√°lisis</h2>', unsafe_allow_html=True)\n",
    "        \n",
    "        if uploaded_file is not None:\n",
    "            # Bot√≥n para analizar\n",
    "            if st.button(\"üî¨ Analizar Imagen\", type=\"primary\"):\n",
    "                with st.spinner(\"Analizando imagen...\"):\n",
    "                    # Hacer predicci√≥n\n",
    "                    result, confidence, risk_level = detector.predict(image)\n",
    "                    \n",
    "                    if result is not None:\n",
    "                        # Mostrar resultado\n",
    "                        if result == \"Maligno\":\n",
    "                            st.markdown(f\"\"\"\n",
    "                            <div class=\"result-box malignant-result\">\n",
    "                                <h3>‚ö†Ô∏è Resultado: {result}</h3>\n",
    "                                <p><strong>Nivel de riesgo:</strong> {risk_level}</p>\n",
    "                                <p><strong>Confianza:</strong> {confidence:.2%}</p>\n",
    "                                <p><strong>Recomendaci√≥n:</strong> Consulte inmediatamente con un dermat√≥logo</p>\n",
    "                            </div>\n",
    "                            \"\"\", unsafe_allow_html=True)\n",
    "                        else:\n",
    "                            st.markdown(f\"\"\"\n",
    "                            <div class=\"result-box benign-result\">\n",
    "                                <h3>‚úÖ Resultado: {result}</h3>\n",
    "                                <p><strong>Nivel de riesgo:</strong> {risk_level}</p>\n",
    "                                <p><strong>Confianza:</strong> {(1-confidence):.2%}</p>\n",
    "                                <p><strong>Recomendaci√≥n:</strong> Mantenga observaci√≥n peri√≥dica</p>\n",
    "                            </div>\n",
    "                            \"\"\", unsafe_allow_html=True)\n",
    "                        \n",
    "                        # Gr√°fico de confianza\n",
    "                        st.markdown('<h3 class=\"sub-header\">üìä Nivel de Confianza</h3>', unsafe_allow_html=True)\n",
    "                        \n",
    "                        fig, ax = plt.subplots(figsize=(10, 6))\n",
    "                        \n",
    "                        if result == \"Maligno\":\n",
    "                            probs = [1-confidence, confidence]\n",
    "                            colors = ['#28a745', '#dc3545']\n",
    "                        else:\n",
    "                            probs = [1-confidence, confidence]\n",
    "                            colors = ['#28a745', '#dc3545']\n",
    "                        \n",
    "                        bars = ax.bar(['Benigno', 'Maligno'], probs, color=colors, alpha=0.7)\n",
    "                        ax.set_ylabel('Probabilidad')\n",
    "                        ax.set_title('Probabilidad de Clasificaci√≥n')\n",
    "                        ax.set_ylim(0, 1)\n",
    "                        \n",
    "                        # Agregar valores en las barras\n",
    "                        for i, (bar, prob) in enumerate(zip(bars, probs)):\n",
    "                            ax.text(bar.get_x() + bar.get_width()/2., bar.get_height() + 0.01,\n",
    "                                   f'{prob:.2%}', ha='center', va='bottom')\n",
    "                        \n",
    "                        plt.tight_layout()\n",
    "                        st.pyplot(fig)\n",
    "                        \n",
    "                        # Informaci√≥n adicional\n",
    "                        st.markdown(\"\"\"\n",
    "                        <div class=\"info-box\">\n",
    "                            <h4>ü©∫ Pr√≥ximos Pasos Recomendados</h4>\n",
    "                            <ul>\n",
    "                                <li>Consulte con un dermat√≥logo profesional</li>\n",
    "                                <li>Lleve esta imagen a su cita m√©dica</li>\n",
    "                                <li>Documente cualquier cambio en la lesi√≥n</li>\n",
    "                                <li>Mantenga un seguimiento regular</li>\n",
    "                            </ul>\n",
    "                        </div>\n",
    "                        \"\"\", unsafe_allow_html=True)\n",
    "                    else:\n",
    "                        st.error(\"No se pudo analizar la imagen. Int√©ntelo nuevamente.\")\n",
    "        else:\n",
    "            st.info(\"üëÜ Por favor, suba una imagen para comenzar el an√°lisis\")\n",
    "    \n",
    "    # Informaci√≥n adicional\n",
    "    st.markdown(\"---\")\n",
    "    st.markdown('<h2 class=\"sub-header\">üìö Informaci√≥n Adicional</h2>', unsafe_allow_html=True)\n",
    "    \n",
    "    col1, col2, col3 = st.columns(3)\n",
    "    \n",
    "    with col1:\n",
    "        st.markdown(\"\"\"\n",
    "        ### üéØ Sobre el Melanoma\n",
    "        El melanoma es el tipo m√°s serio de c√°ncer de piel. Se desarrolla en las c√©lulas que producen melanina (pigmento). La detecci√≥n temprana es crucial para el tratamiento exitoso.\n",
    "        \"\"\")\n",
    "    \n",
    "    with col2:\n",
    "        st.markdown(\"\"\"\n",
    "        ### üîç Regla ABCDE\n",
    "        - **A**simetr√≠a\n",
    "        - **B**ordes irregulares\n",
    "        - **C**olor variado\n",
    "        - **D**i√°metro > 6mm\n",
    "        - **E**voluci√≥n/cambios\n",
    "        \"\"\")\n",
    "    \n",
    "    with col3:\n",
    "        st.markdown(\"\"\"\n",
    "        ### üìû Cu√°ndo Consultar\n",
    "        - Lunares nuevos\n",
    "        - Cambios en lunares existentes\n",
    "        - Picaz√≥n o sangrado\n",
    "        - Crecimiento r√°pido\n",
    "        - Cualquier preocupaci√≥n\n",
    "        \"\"\")\n",
    "    \n",
    "    # Footer\n",
    "    st.markdown(\"---\")\n",
    "    st.markdown(\"\"\"\n",
    "    <div style=\"text-align: center; color: #666; padding: 2rem;\">\n",
    "        <p>üî¨ Desarrollado con TensorFlow y Streamlit</p>\n",
    "        <p>‚ö†Ô∏è Solo para fines educativos - No reemplaza el diagn√≥stico m√©dico profesional</p>\n",
    "    </div>\n",
    "    \"\"\", unsafe_allow_html=True)\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
