import streamlit as st
import tensorflow as tf
from tensorflow.keras.models import load_model
from PIL import Image
import numpy as np
import cv2
import io
import base64
from datetime import datetime
import matplotlib.pyplot as plt
import seaborn as sns
import os

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Detector de C√°ncer de Piel",
    page_icon="üî¨",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Estilos CSS personalizados
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .sub-header {
        font-size: 1.5rem;
        color: #ff7f0e;
        margin-bottom: 1rem;
    }
    .result-box {
        padding: 1rem;
        border-radius: 10px;
        margin: 1rem 0;
    }
    .benign-result {
        background-color: #d4edda;
        border: 1px solid #c3e6cb;
        color: #155724;
    }
    .malignant-result {
        background-color: #f8d7da;
        border: 1px solid #f5c6cb;
        color: #721c24;
    }
    .info-box {
        background-color: #d1ecf1;
        border: 1px solid #bee5eb;
        color: #0c5460;
        padding: 1rem;
        border-radius: 5px;
        margin: 1rem 0;
    }
    .warning-box {
        background-color: #fff3cd;
        border: 1px solid #ffeaa7;
        color: #856404;
        padding: 1rem;
        border-radius: 5px;
        margin: 1rem 0;
    }
</style>
""", unsafe_allow_html=True)

def create_demo_model():
    """Crear un modelo de demostraci√≥n simple para pruebas"""
    model = tf.keras.Sequential([
        tf.keras.layers.InputLayer(input_shape=(224, 224, 3)),
        tf.keras.layers.Conv2D(32, (3, 3), activation='relu'),
        tf.keras.layers.MaxPooling2D((2, 2)),
        tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),
        tf.keras.layers.MaxPooling2D((2, 2)),
        tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),
        tf.keras.layers.GlobalAveragePooling2D(),
        tf.keras.layers.Dense(64, activation='relu'),
        tf.keras.layers.Dropout(0.5),
        tf.keras.layers.Dense(1, activation='sigmoid')
    ])
    
    model.compile(
        optimizer='adam',
        loss='binary_crossentropy',
        metrics=['accuracy']
    )
    
    return model

@st.cache_resource
def load_skin_cancer_model():
    """Cargar el modelo entrenado o crear uno de demostraci√≥n"""
    model_paths = [
        'models/skin_cancer_model.h5',
        'skin_cancer_model.h5',
        './models/skin_cancer_model.h5'
    ]
    
    # Intentar cargar el modelo desde diferentes rutas
    for model_path in model_paths:
        if os.path.exists(model_path):
            try:
                model = load_model(model_path)
                st.success(f"‚úÖ Modelo cargado exitosamente desde: {model_path}")
                return model, True
            except Exception as e:
                st.warning(f"‚ö†Ô∏è Error al cargar modelo desde {model_path}: {str(e)}")
                continue
    
    # Si no se puede cargar el modelo real, crear uno de demostraci√≥n
    st.warning("‚ö†Ô∏è No se pudo cargar el modelo entrenado. Usando modelo de demostraci√≥n.")
    demo_model = create_demo_model()
    return demo_model, False

class SkinCancerDetector:
    def __init__(self):
        self.model = None
        self.is_real_model = False
        self.img_size = (224, 224)
        self.load_model()
    
    def load_model(self):
        """Cargar el modelo"""
        try:
            self.model, self.is_real_model = load_skin_cancer_model()
            if self.model is None:
                raise Exception("No se pudo cargar ning√∫n modelo")
        except Exception as e:
            st.error(f"Error cr√≠tico al cargar el modelo: {str(e)}")
            self.model = None
            self.is_real_model = False
    
    def preprocess_image(self, image):
        """Preprocesar la imagen para el modelo"""
        try:
            # Convertir a RGB si es necesario
            if image.mode != 'RGB':
                image = image.convert('RGB')
            
            # Redimensionar
            image = image.resize(self.img_size)
            
            # Convertir a array numpy
            img_array = np.array(image)
            
            # Normalizar
            img_array = img_array / 255.0
            
            # Expandir dimensiones para el batch
            img_array = np.expand_dims(img_array, axis=0)
            
            return img_array
        except Exception as e:
            st.error(f"Error al procesar la imagen: {str(e)}")
            return None
    
    def predict(self, image):
        """Hacer predicci√≥n sobre la imagen"""
        if self.model is None:
            return None, None, None
        
        try:
            # Preprocesar imagen
            processed_image = self.preprocess_image(image)
            if processed_image is None:
                return None, None, None
            
            # Hacer predicci√≥n
            if self.is_real_model:
                prediction = self.model.predict(processed_image, verbose=0)
                confidence = float(prediction[0][0])
            else:
                # Para el modelo demo, generar una predicci√≥n aleatoria basada en caracter√≠sticas de la imagen
                # Esto es solo para demostraci√≥n
                img_mean = np.mean(processed_image)
                confidence = min(max(img_mean + np.random.normal(0, 0.1), 0.1), 0.9)
            
            # Interpretar resultado
            if confidence > 0.5:
                result = "Maligno"
                risk_level = "Alto"
            else:
                result = "Benigno"
                risk_level = "Bajo"
            
            return result, confidence, risk_level
        except Exception as e:
            st.error(f"Error en la predicci√≥n: {str(e)}")
            return None, None, None

def main():
    # T√≠tulo principal
    st.markdown('<h1 class="main-header">üî¨ Detector de C√°ncer de Piel</h1>', unsafe_allow_html=True)
    
    # Advertencia si no hay modelo real
    detector = SkinCancerDetector()
    
    if not detector.is_real_model:
        st.markdown("""
        <div class="warning-box">
            <h3>‚ö†Ô∏è Modo de Demostraci√≥n</h3>
            <p>Esta aplicaci√≥n est√° ejecut√°ndose en <strong>modo de demostraci√≥n</strong> porque no se pudo cargar el modelo entrenado.</p>
            <p>Para usar el modelo real, aseg√∫rese de que el archivo <code>models/skin_cancer_model.h5</code> est√© disponible en su repositorio.</p>
            <p><strong>Los resultados mostrados son solo para demostraci√≥n y NO son diagn√≥sticos reales.</strong></p>
        </div>
        """, unsafe_allow_html=True)
    
    # Informaci√≥n sobre la aplicaci√≥n
    st.markdown("""
    <div class="info-box">
        <h3>‚ÑπÔ∏è Informaci√≥n Importante</h3>
        <p>Esta aplicaci√≥n utiliza inteligencia artificial para analizar im√°genes de lunares y lesiones cut√°neas, 
        ayudando en la detecci√≥n temprana de melanomas. Sin embargo, <strong>NO reemplaza el diagn√≥stico m√©dico profesional</strong>.</p>
        <p><strong>Siempre consulte con un dermat√≥logo para un diagn√≥stico definitivo.</strong></p>
    </div>
    """, unsafe_allow_html=True)
    
    # Sidebar con informaci√≥n
    with st.sidebar:
        st.markdown('<h2 class="sub-header">üìã Instrucciones</h2>', unsafe_allow_html=True)
        st.markdown("""
        1. **Suba una imagen** de la lesi√≥n cut√°nea
        2. **Aseg√∫rese** de que la imagen sea clara y bien iluminada
        3. **Revise** el resultado de la predicci√≥n
        4. **Consulte** con un m√©dico especialista
        """)
        
        st.markdown('<h2 class="sub-header">‚ö†Ô∏è Limitaciones</h2>', unsafe_allow_html=True)
        st.markdown("""
        - Solo para fines educativos
        - Precisi√≥n limitada
        - No reemplaza diagn√≥stico m√©dico
        - Requiere im√°genes de alta calidad
        """)
        
        st.markdown('<h2 class="sub-header">üìä Estado del Sistema</h2>', unsafe_allow_html=True)
        if detector.is_real_model:
            st.success("‚úÖ Modelo entrenado cargado")
        else:
            st.warning("‚ö†Ô∏è Modo demostraci√≥n activo")
        
        st.markdown(f"""
        - **Estado del modelo**: {'Real' if detector.is_real_model else 'Demostraci√≥n'}
        - **Arquitectura**: CNN profunda
        - **Tama√±o de entrada**: 224x224 px
        - **Precisi√≥n estimada**: {'~85-90%' if detector.is_real_model else 'N/A (demo)'}
        """)
    
    # √Årea principal de la aplicaci√≥n
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.markdown('<h2 class="sub-header">üì§ Subir Imagen</h2>', unsafe_allow_html=True)
        
        uploaded_file = st.file_uploader(
            "Seleccione una imagen de la lesi√≥n cut√°nea",
            type=['jpg', 'jpeg', 'png'],
            help="Formatos soportados: JPG, JPEG, PNG"
        )
        
        if uploaded_file is not None:
            # Mostrar imagen original
            image = Image.open(uploaded_file)
            st.image(image, caption="Imagen cargada", use_column_width=True)
            
            # Informaci√≥n de la imagen
            st.write(f"**Tama√±o original:** {image.size}")
            st.write(f"**Formato:** {image.format}")
            st.write(f"**Modo:** {image.mode}")
    
    with col2:
        st.markdown('<h2 class="sub-header">üîç Resultado del An√°lisis</h2>', unsafe_allow_html=True)
        
        if uploaded_file is not None:
            # Bot√≥n para analizar
            if st.button("üî¨ Analizar Imagen", type="primary", disabled=(detector.model is None)):
                if detector.model is None:
                    st.error("‚ùå No hay modelo disponible para realizar la predicci√≥n.")
                else:
                    with st.spinner("Analizando imagen..."):
                        # Hacer predicci√≥n
                        result, confidence, risk_level = detector.predict(image)
                        
                        if result is not None:
                            # Mostrar resultado
                            if result == "Maligno":
                                st.markdown(f"""
                                <div class="result-box malignant-result">
                                    <h3>‚ö†Ô∏è Resultado: {result}</h3>
                                    <p><strong>Nivel de riesgo:</strong> {risk_level}</p>
                                    <p><strong>Confianza:</strong> {confidence:.2%}</p>
                                    <p><strong>Recomendaci√≥n:</strong> Consulte inmediatamente con un dermat√≥logo</p>
                                    {'<p><em>Resultado de demostraci√≥n - No es un diagn√≥stico real</em></p>' if not detector.is_real_model else ''}
                                </div>
                                """, unsafe_allow_html=True)
                            else:
                                st.markdown(f"""
                                <div class="result-box benign-result">
                                    <h3>‚úÖ Resultado: {result}</h3>
                                    <p><strong>Nivel de riesgo:</strong> {risk_level}</p>
                                    <p><strong>Confianza:</strong> {(1-confidence):.2%}</p>
                                    <p><strong>Recomendaci√≥n:</strong> Mantenga observaci√≥n peri√≥dica</p>
                                    {'<p><em>Resultado de demostraci√≥n - No es un diagn√≥stico real</em></p>' if not detector.is_real_model else ''}
                                </div>
                                """, unsafe_allow_html=True)
                            
                            # Gr√°fico de confianza
                            st.markdown('<h3 class="sub-header">üìä Nivel de Confianza</h3>', unsafe_allow_html=True)
                            
                            fig, ax = plt.subplots(figsize=(10, 6))
                            
                            if result == "Maligno":
                                probs = [1-confidence, confidence]
                                colors = ['#28a745', '#dc3545']
                            else:
                                probs = [1-confidence, confidence]
                                colors = ['#28a745', '#dc3545']
                            
                            bars = ax.bar(['Benigno', 'Maligno'], probs, color=colors, alpha=0.7)
                            ax.set_ylabel('Probabilidad')
                            ax.set_title('Probabilidad de Clasificaci√≥n' + (' (Demostraci√≥n)' if not detector.is_real_model else ''))
                            ax.set_ylim(0, 1)
                            
                            # Agregar valores en las barras
                            for i, (bar, prob) in enumerate(zip(bars, probs)):
                                ax.text(bar.get_x() + bar.get_width()/2., bar.get_height() + 0.01,
                                       f'{prob:.2%}', ha='center', va='bottom')
                            
                            plt.tight_layout()
                            st.pyplot(fig)
                            
                            # Informaci√≥n adicional
                            st.markdown("""
                            <div class="info-box">
                                <h4>ü©∫ Pr√≥ximos Pasos Recomendados</h4>
                                <ul>
                                    <li>Consulte con un dermat√≥logo profesional</li>
                                    <li>Lleve esta imagen a su cita m√©dica</li>
                                    <li>Documente cualquier cambio en la lesi√≥n</li>
                                    <li>Mantenga un seguimiento regular</li>
                                </ul>
                            </div>
                            """, unsafe_allow_html=True)
                        else:
                            st.error("No se pudo analizar la imagen. Int√©ntelo nuevamente.")
        else:
            st.info("üëÜ Por favor, suba una imagen para comenzar el an√°lisis")
    
    # Informaci√≥n adicional
    st.markdown("---")
    st.markdown('<h2 class="sub-header">üìö Informaci√≥n Adicional</h2>', unsafe_allow_html=True)
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("""
        ### üéØ Sobre el Melanoma
        El melanoma es el tipo m√°s serio de c√°ncer de piel. Se desarrolla en las c√©lulas que producen melanina (pigmento). La detecci√≥n temprana es crucial para el tratamiento exitoso.
        """)
    
    with col2:
        st.markdown("""
        ### üîç Regla ABCDE
        - **A**simetr√≠a
        - **B**ordes irregulares
        - **C**olor variado
        - **D**i√°metro > 6mm
        - **E**voluci√≥n/cambios
        """)
    
    with col3:
        st.markdown("""
        ### üìû Cu√°ndo Consultar
        - Lunares nuevos
        - Cambios en lunares existentes
        - Picaz√≥n o sangrado
        - Crecimiento r√°pido
        - Cualquier preocupaci√≥n
        """)
    
    # Secci√≥n de soluci√≥n de problemas
    with st.expander("üîß Soluci√≥n de Problemas"):
        st.markdown("""
        ### Problemas Comunes:
        
        **1. El modelo no se carga:**
        - Aseg√∫rese de que el archivo `models/skin_cancer_model.h5` est√© en su repositorio
        - Verifique que el archivo no est√© corrupto
        - El archivo debe estar en la carpeta `models/` en la ra√≠z del proyecto
        
        **2. Error al procesar la imagen:**
        - Use im√°genes en formato JPG, JPEG o PNG
        - Aseg√∫rese de que la imagen no est√© corrupta
        - Intente con una imagen de menor tama√±o
        
        **3. La aplicaci√≥n es lenta:**
        - Las primeras predicciones pueden ser m√°s lentas
        - Streamlit Cloud tiene recursos limitados
        - Considere optimizar el tama√±o de las im√°genes
        """)
    
    # Footer
    st.markdown("---")
    st.markdown("""
    <div style="text-align: center; color: #666; padding: 2rem;">
        <p>üî¨ Desarrollado con TensorFlow y Streamlit</p>
        <p>‚ö†Ô∏è Solo para fines educativos - No reemplaza el diagn√≥stico m√©dico profesional</p>
        <p>üìù Versi√≥n mejorada con manejo de errores y modo de demostraci√≥n</p>
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()
