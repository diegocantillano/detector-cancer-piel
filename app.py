import streamlit as st
import tensorflow as tf
from tensorflow.keras.models import load_model
from PIL import Image
import numpy as np
import cv2
import io
import base64
from datetime import datetime
import matplotlib.pyplot as plt
import seaborn as sns
import os
import warnings

# Suprimir warnings espec√≠ficos
warnings.filterwarnings("ignore", category=UserWarning, module="tensorflow")
warnings.filterwarnings("ignore", message="Compiled the loaded model")

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Detector de C√°ncer de Piel",
    page_icon="üî¨",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Estilos CSS personalizados
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .sub-header {
        font-size: 1.5rem;
        color: #ff7f0e;
        margin-bottom: 1rem;
    }
    .result-box {
        padding: 1rem;
        border-radius: 10px;
        margin: 1rem 0;
    }
    .benign-result {
        background-color: #d4edda;
        border: 1px solid #c3e6cb;
        color: #155724;
    }
    .malignant-result {
        background-color: #f8d7da;
        border: 1px solid #f5c6cb;
        color: #721c24;
    }
    .info-box {
        background-color: #d1ecf1;
        border: 1px solid #bee5eb;
        color: #0c5460;
        padding: 1rem;
        border-radius: 5px;
        margin: 1rem 0;
    }
    .warning-box {
        background-color: #fff3cd;
        border: 1px solid #ffeaa7;
        color: #856404;
        padding: 1rem;
        border-radius: 5px;
        margin: 1rem 0;
    }
    .stSpinner > div > div {
        border-top-color: #1f77b4;
    }
</style>
""", unsafe_allow_html=True)

def create_demo_model():
    """Crear un modelo de demostraci√≥n simple para pruebas"""
    try:
        # Suprimir logs de TensorFlow durante la creaci√≥n
        tf.get_logger().setLevel('ERROR')
        
        model = tf.keras.Sequential([
            tf.keras.layers.InputLayer(input_shape=(224, 224, 3)),
            tf.keras.layers.Conv2D(32, (3, 3), activation='relu'),
            tf.keras.layers.MaxPooling2D((2, 2)),
            tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),
            tf.keras.layers.MaxPooling2D((2, 2)),
            tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),
            tf.keras.layers.GlobalAveragePooling2D(),
            tf.keras.layers.Dense(64, activation='relu'),
            tf.keras.layers.Dropout(0.5),
            tf.keras.layers.Dense(1, activation='sigmoid')
        ])
        
        # Compilar el modelo correctamente
        model.compile(
            optimizer=tf.keras.optimizers.Adam(learning_rate=0.001),
            loss='binary_crossentropy',
            metrics=['accuracy']
        )
        
        # Construir el modelo con datos dummy para evitar warnings
        dummy_input = np.zeros((1, 224, 224, 3))
        _ = model.predict(dummy_input, verbose=0)
        
        return model
    except Exception as e:
        st.error(f"Error creando modelo de demostraci√≥n: {str(e)}")
        return None

@st.cache_resource
def load_skin_cancer_model():
    """Cargar el modelo entrenado o crear uno de demostraci√≥n"""
    # Suprimir logs de TensorFlow
    tf.get_logger().setLevel('ERROR')
    
    model_paths = [
        'models/skin_cancer_model.h5',
        'skin_cancer_model.h5',
        './models/skin_cancer_model.h5',
        'model.h5'
    ]
    
    # Intentar cargar el modelo desde diferentes rutas
    for model_path in model_paths:
        if os.path.exists(model_path):
            try:
                # Cargar modelo sin mostrar warnings
                with warnings.catch_warnings():
                    warnings.simplefilter("ignore")
                    model = load_model(model_path, compile=False)
                
                # Recompilar el modelo para evitar warnings
                model.compile(
                    optimizer=tf.keras.optimizers.Adam(learning_rate=0.001),
                    loss='binary_crossentropy',
                    metrics=['accuracy']
                )
                
                # Construir m√©tricas con predicci√≥n dummy
                dummy_input = np.zeros((1, 224, 224, 3))
                _ = model.predict(dummy_input, verbose=0)
                
                return model, True
            except Exception as e:
                continue
    
    # Si no se puede cargar el modelo real, crear uno de demostraci√≥n
    demo_model = create_demo_model()
    return demo_model, False

class SkinCancerDetector:
    def __init__(self):
        self.model = None
        self.is_real_model = False
        self.img_size = (224, 224)
        self.load_model()
    
    def load_model(self):
        """Cargar el modelo"""
        try:
            with st.spinner("Cargando modelo de IA..."):
                self.model, self.is_real_model = load_skin_cancer_model()
                if self.model is None:
                    raise Exception("No se pudo cargar ning√∫n modelo")
        except Exception as e:
            st.error(f"Error cr√≠tico al cargar el modelo: {str(e)}")
            self.model = None
            self.is_real_model = False
    
    def preprocess_image(self, image):
        """Preprocesar la imagen para el modelo"""
        try:
            # Convertir a RGB si es necesario
            if image.mode != 'RGB':
                image = image.convert('RGB')
            
            # Redimensionar usando LANCZOS para mejor calidad
            image = image.resize(self.img_size, Image.Resampling.LANCZOS)
            
            # Convertir a array numpy
            img_array = np.array(image, dtype=np.float32)
            
            # Normalizar a [0, 1]
            img_array = img_array / 255.0
            
            # Expandir dimensiones para el batch
            img_array = np.expand_dims(img_array, axis=0)
            
            return img_array
        except Exception as e:
            st.error(f"Error al procesar la imagen: {str(e)}")
            return None
    
    def predict(self, image):
        """Hacer predicci√≥n sobre la imagen"""
        if self.model is None:
            return None, None, None
        
        try:
            # Preprocesar imagen
            processed_image = self.preprocess_image(image)
            if processed_image is None:
                return None, None, None
            
            # Hacer predicci√≥n sin verbose
            with warnings.catch_warnings():
                warnings.simplefilter("ignore")
                prediction = self.model.predict(processed_image, verbose=0)
            
            if self.is_real_model:
                confidence = float(prediction[0][0])
            else:
                # Para el modelo demo, generar una predicci√≥n semi-realista
                # basada en caracter√≠sticas de la imagen
                img_mean = np.mean(processed_image)
                img_std = np.std(processed_image)
                
                # Simulaci√≥n m√°s realista basada en caracter√≠sticas de la imagen
                base_prob = (img_mean + img_std) * 0.5
                noise = np.random.normal(0, 0.1)
                confidence = np.clip(base_prob + noise, 0.05, 0.95)
            
            # Interpretar resultado
            if confidence > 0.5:
                result = "Maligno"
                risk_level = "Alto"
                recommendation = "Consulte inmediatamente con un dermat√≥logo"
            else:
                result = "Benigno"
                risk_level = "Bajo"
                recommendation = "Mantenga observaci√≥n peri√≥dica y consulte con su m√©dico"
            
            return result, confidence, risk_level, recommendation
        except Exception as e:
            st.error(f"Error en la predicci√≥n: {str(e)}")
            return None, None, None, None

def create_confidence_chart(result, confidence):
    """Crear gr√°fico de confianza mejorado"""
    fig, ax = plt.subplots(figsize=(10, 6))
    
    if result == "Maligno":
        probs = [1-confidence, confidence]
        labels = ['Benigno', 'Maligno']
        colors = ['#28a745', '#dc3545']
    else:
        probs = [1-confidence, confidence]
        labels = ['Benigno', 'Maligno']
        colors = ['#28a745', '#dc3545']
    
    bars = ax.bar(labels, probs, color=colors, alpha=0.8, edgecolor='black', linewidth=1)
    ax.set_ylabel('Probabilidad', fontsize=12)
    ax.set_title('Distribuci√≥n de Probabilidades', fontsize=14, fontweight='bold')
    ax.set_ylim(0, 1)
    ax.grid(True, alpha=0.3, axis='y')
    
    # Agregar valores en las barras
    for i, (bar, prob) in enumerate(zip(bars, probs)):
        height = bar.get_height()
        ax.text(bar.get_x() + bar.get_width()/2., height + 0.02,
               f'{prob:.1%}', ha='center', va='bottom', fontweight='bold')
    
    # Mejorar el estilo
    ax.spines['top'].set_visible(False)
    ax.spines['right'].set_visible(False)
    plt.tight_layout()
    
    return fig

def main():
    # T√≠tulo principal
    st.markdown('<h1 class="main-header">üî¨ Detector de C√°ncer de Piel</h1>', unsafe_allow_html=True)
    
    # Inicializar detector
    if 'detector' not in st.session_state:
        st.session_state.detector = SkinCancerDetector()
    
    detector = st.session_state.detector
    
    # Advertencia si no hay modelo real
    if detector.model is None:
        st.error("‚ùå No se pudo cargar ning√∫n modelo. La aplicaci√≥n no puede funcionar.")
        st.stop()
    elif not detector.is_real_model:
        st.markdown("""
        <div class="warning-box">
            <h3>‚ö†Ô∏è Modo de Demostraci√≥n Activo</h3>
            <p>Esta aplicaci√≥n est√° ejecut√°ndose en <strong>modo de demostraci√≥n</strong> porque no se encontr√≥ el modelo entrenado.</p>
            <p>Para usar el modelo real, aseg√∫rese de que el archivo del modelo est√© disponible en las rutas especificadas.</p>
            <p><strong>‚ö†Ô∏è Los resultados mostrados son simulaciones y NO son diagn√≥sticos m√©dicos reales.</strong></p>
        </div>
        """, unsafe_allow_html=True)
    
    # Informaci√≥n sobre la aplicaci√≥n
    st.markdown("""
    <div class="info-box">
        <h3>‚ÑπÔ∏è Informaci√≥n Importante</h3>
        <p>Esta herramienta utiliza inteligencia artificial para analizar im√°genes de lunares y lesiones cut√°neas, 
        como apoyo en la detecci√≥n temprana de melanomas.</p>
        <p><strong>ü©∫ IMPORTANTE: Esta herramienta NO reemplaza el diagn√≥stico m√©dico profesional. 
        Siempre consulte con un dermat√≥logo para obtener un diagn√≥stico definitivo.</strong></p>
    </div>
    """, unsafe_allow_html=True)
    
    # Sidebar con informaci√≥n
    with st.sidebar:
        st.markdown('<h2 class="sub-header">üìã Gu√≠a de Uso</h2>', unsafe_allow_html=True)
        st.markdown("""
        **Pasos a seguir:**
        1. üì§ **Suba una imagen** de la lesi√≥n cut√°nea
        2. üîç **Verifique** que la imagen sea clara y bien iluminada
        3. üî¨ **Haga clic en "Analizar"** para obtener el resultado
        4. üìä **Revise** la predicci√≥n y el nivel de confianza
        5. ü©∫ **Consulte** con un dermat√≥logo profesional
        """)
        
        st.markdown('<h2 class="sub-header">‚ö†Ô∏è Limitaciones</h2>', unsafe_allow_html=True)
        st.markdown("""
        - ‚úã **Solo para fines educativos e informativos**
        - üéØ **Precisi√≥n limitada** - no es 100% confiable
        - üö´ **No reemplaza** el criterio m√©dico profesional
        - üì∏ **Requiere im√°genes** de alta calidad y buena iluminaci√≥n
        - üî¨ **Resultados orientativos** - siempre confirme con especialista
        """)
        
        st.markdown('<h2 class="sub-header">üìä Estado del Sistema</h2>', unsafe_allow_html=True)
        if detector.model is not None:
            if detector.is_real_model:
                st.success("‚úÖ Modelo entrenado cargado correctamente")
                model_status = "Modelo Real"
                accuracy = "~85-90%"
            else:
                st.warning("‚ö†Ô∏è Modo demostraci√≥n activo")
                model_status = "Modo Demostraci√≥n"
                accuracy = "N/A (simulaci√≥n)"
        else:
            st.error("‚ùå Error en la carga del modelo")
            model_status = "Error"
            accuracy = "N/A"
        
        st.markdown(f"""
        **Informaci√≥n t√©cnica:**
        - **Estado**: {model_status}
        - **Arquitectura**: Red Neuronal Convolucional
        - **Entrada**: 224√ó224 p√≠xeles
        - **Precisi√≥n estimada**: {accuracy}
        - **Clases**: Benigno / Maligno
        """)
    
    # √Årea principal de la aplicaci√≥n
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.markdown('<h2 class="sub-header">üì§ Subir Imagen</h2>', unsafe_allow_html=True)
        
        uploaded_file = st.file_uploader(
            "Seleccione una imagen de la lesi√≥n cut√°nea",
            type=['jpg', 'jpeg', 'png', 'bmp'],
            help="Formatos soportados: JPG, JPEG, PNG, BMP. Tama√±o m√°ximo: 200MB"
        )
        
        if uploaded_file is not None:
            try:
                # Mostrar imagen original
                image = Image.open(uploaded_file)
                st.image(image, caption="Imagen cargada", use_container_width=True)
                
                # Informaci√≥n de la imagen
                file_size = len(uploaded_file.getvalue())
                st.markdown(f"""
                **Detalles de la imagen:**
                - **Dimensiones**: {image.size[0]} √ó {image.size[1]} p√≠xeles
                - **Formato**: {image.format}
                - **Modo de color**: {image.mode}
                - **Tama√±o del archivo**: {file_size / 1024:.1f} KB
                """)
            except Exception as e:
                st.error(f"Error al cargar la imagen: {str(e)}")
                uploaded_file = None
    
    with col2:
        st.markdown('<h2 class="sub-header">üîç Resultado del An√°lisis</h2>', unsafe_allow_html=True)
        
        if uploaded_file is not None:
            # Bot√≥n para analizar
            analyze_button = st.button(
                "üî¨ Analizar Imagen", 
                type="primary", 
                disabled=(detector.model is None),
                use_container_width=True
            )
            
            if analyze_button:
                if detector.model is None:
                    st.error("‚ùå No hay modelo disponible para realizar la predicci√≥n.")
                else:
                    with st.spinner("üîç Analizando imagen... Por favor espere..."):
                        # Hacer predicci√≥n
                        result_data = detector.predict(image)
                        
                        if len(result_data) == 4 and result_data[0] is not None:
                            result, confidence, risk_level, recommendation = result_data
                            
                            # Mostrar resultado principal
                            if result == "Maligno":
                                st.markdown(f"""
                                <div class="result-box malignant-result">
                                    <h3>‚ö†Ô∏è Resultado: {result}</h3>
                                    <p><strong>Nivel de riesgo:</strong> {risk_level}</p>
                                    <p><strong>Confianza del modelo:</strong> {confidence:.1%}</p>
                                    <p><strong>Recomendaci√≥n:</strong> {recommendation}</p>
                                    {'<p><em>‚ö†Ô∏è Este es un resultado de demostraci√≥n - NO es un diagn√≥stico m√©dico real</em></p>' if not detector.is_real_model else ''}
                                </div>
                                """, unsafe_allow_html=True)
                            else:
                                st.markdown(f"""
                                <div class="result-box benign-result">
                                    <h3>‚úÖ Resultado: {result}</h3>
                                    <p><strong>Nivel de riesgo:</strong> {risk_level}</p>
                                    <p><strong>Confianza del modelo:</strong> {(1-confidence):.1%}</p>
                                    <p><strong>Recomendaci√≥n:</strong> {recommendation}</p>
                                    {'<p><em>‚ÑπÔ∏è Este es un resultado de demostraci√≥n - NO es un diagn√≥stico m√©dico real</em></p>' if not detector.is_real_model else ''}
                                </div>
                                """, unsafe_allow_html=True)
                            
                            # Gr√°fico de confianza mejorado
                            st.markdown('<h3 class="sub-header">üìä Distribuci√≥n de Probabilidades</h3>', unsafe_allow_html=True)
                            
                            fig = create_confidence_chart(result, confidence)
                            st.pyplot(fig, use_container_width=True)
                            plt.close(fig)  # Liberar memoria
                            
                            # Informaci√≥n adicional sobre el resultado
                            st.markdown("""
                            <div class="info-box">
                                <h4>ü©∫ Pasos Recomendados</h4>
                                <ol>
                                    <li><strong>Consulta m√©dica:</strong> Programe una cita con un dermat√≥logo</li>
                                    <li><strong>Documentaci√≥n:</strong> Guarde esta imagen para mostrar al especialista</li>
                                    <li><strong>Seguimiento:</strong> Documente cualquier cambio en la lesi√≥n</li>
                                    <li><strong>Prevenci√≥n:</strong> Use protector solar y examine su piel regularmente</li>
                                </ol>
                            </div>
                            """, unsafe_allow_html=True)
                            
                            # Interpretaci√≥n del resultado
                            confidence_level = "alta" if abs(confidence - 0.5) > 0.3 else "moderada" if abs(confidence - 0.5) > 0.1 else "baja"
                            st.info(f"üí° **Interpretaci√≥n**: La confianza del modelo es **{confidence_level}** para esta predicci√≥n. "
                                   f"{'Recuerde que este es solo un resultado de demostraci√≥n.' if not detector.is_real_model else 'Siempre consulte con un profesional m√©dico para confirmaci√≥n.'}")
                        else:
                            st.error("‚ùå No se pudo analizar la imagen. Por favor, int√©ntelo nuevamente con una imagen diferente.")
        else:
            st.info("üëÜ **Instrucciones**: Suba una imagen en la columna izquierda para comenzar el an√°lisis")
            
            # Mostrar ejemplos de buenas im√°genes
            st.markdown("""
            ### üì∏ Consejos para una buena imagen:
            - **Iluminaci√≥n**: Use luz natural o buena iluminaci√≥n artificial
            - **Enfoque**: Aseg√∫rese de que la lesi√≥n est√© enfocada y n√≠tida
            - **Distancia**: Tome la foto lo suficientemente cerca para ver detalles
            - **Fondo**: Use un fondo contrastante (claro para lesiones oscuras)
            - **Estabilidad**: Evite im√°genes borrosas o movidas
            """)
    
    # Informaci√≥n educativa adicional
    st.markdown("---")
    st.markdown('<h2 class="sub-header">üìö Informaci√≥n Educativa</h2>', unsafe_allow_html=True)
    
    tab1, tab2, tab3 = st.tabs(["üéØ Sobre el Melanoma", "üîç Regla ABCDE", "üìû Cu√°ndo Consultar"])
    
    with tab1:
        st.markdown("""
        ### ¬øQu√© es el melanoma?
        
        El **melanoma** es el tipo m√°s agresivo de c√°ncer de piel, aunque tambi√©n es el menos com√∫n. 
        Se desarrolla en los **melanocitos**, las c√©lulas que producen melanina (el pigmento que da color a la piel).
        
        **Datos importantes:**
        - üéØ **Detecci√≥n temprana**: Es clave para un tratamiento exitoso
        - üìà **Incidencia**: Ha aumentado significativamente en las √∫ltimas d√©cadas
        - ‚òÄÔ∏è **Principal causa**: Exposici√≥n excesiva a radiaci√≥n UV
        - üë• **Factores de riesgo**: Piel clara, muchos lunares, antecedentes familiares
        - üí™ **Pron√≥stico**: Excelente si se detecta temprano (>90% supervivencia a 5 a√±os)
        """)
    
    with tab2:
        st.markdown("""
        ### La Regla ABCDE para evaluar lunares
        
        Esta regla te ayuda a identificar cambios sospechosos en lunares:
        
        - **üÖ∞Ô∏è Asimetr√≠a**: Una mitad no coincide con la otra
        - **üÖ±Ô∏è Bordes**: Bordes irregulares, dentados o mal definidos
        - **üé® Color**: Color no uniforme con tonos marrones, negros, rojos, blancos o azules
        - **üìè Di√°metro**: Mayor a 6mm (tama√±o de un borrador de l√°piz)
        - **üîÑ Evoluci√≥n**: Cambios en tama√±o, forma, color, elevaci√≥n o s√≠ntomas nuevos
        
        **‚ö†Ô∏è Importante**: Si observa cualquiera de estos signos, consulte con un dermat√≥logo.
        """)
    
    with tab3:
        st.markdown("""
        ### ¬øCu√°ndo debe consultar a un m√©dico?
        
        **Consulte inmediatamente si nota:**
        - üÜï **Lunares nuevos** que aparecen despu√©s de los 30 a√±os
        - üîÑ **Cambios** en lunares existentes (tama√±o, forma, color)
        - ü©∏ **Sangrado** o supuraci√≥n de un lunar
        - üî• **Picaz√≥n, ardor** o sensibilidad
        - üìà **Crecimiento r√°pido** de una lesi√≥n
        - üü° **Costras** que no cicatrizan
        
        **Revisiones regulares:**
        - üëÄ **Autoexamen mensual** de toda la piel
        - ü©∫ **Examen dermatol√≥gico anual** (o m√°s frecuente si tiene factores de riesgo)
        - üìÖ **Seguimiento** de lunares sospechosos con fotograf√≠as
        
        **üìû Recuerde**: Es mejor una consulta de m√°s que un diagn√≥stico tard√≠o.
        """)
    
    # Secci√≥n de soluci√≥n de problemas
    with st.expander("üîß Soluci√≥n de Problemas y FAQ"):
        st.markdown("""
        ### Preguntas Frecuentes:
        
        **‚ùì ¬øPor qu√© veo "Modo de Demostraci√≥n"?**
        - El modelo entrenado no se encontr√≥ en el repositorio
        - Los resultados son simulaciones para prop√≥sitos educativos
        - Para usar el modelo real, contacte al desarrollador
        
        **‚ùì ¬øQu√© tan precisa es la herramienta?**
        - Los modelos reales pueden alcanzar 85-90% de precisi√≥n
        - La precisi√≥n depende de la calidad de la imagen
        - NUNCA reemplaza el diagn√≥stico m√©dico profesional
        
        **‚ùì ¬øQu√© tipo de im√°genes funcionan mejor?**
        - Im√°genes claras, bien iluminadas y enfocadas
        - Tomadas con buena c√°mara (smartphone moderno es suficiente)
        - Sin filtros ni ediciones
        - Con buen contraste entre la lesi√≥n y la piel circundante
        
        **‚ùì ¬øPuedo confiar 100% en los resultados?**
        - NO. Esta herramienta es solo de apoyo educativo
        - Los resultados pueden tener falsos positivos o negativos
        - SIEMPRE consulte con un dermat√≥logo para diagn√≥stico definitivo
        
        **‚ùì La aplicaci√≥n es lenta, ¬øqu√© puedo hacer?**
        - Las primeras predicciones pueden tardar m√°s
        - Use im√°genes m√°s peque√±as si es posible
        - La velocidad depende de los recursos del servidor
        """)
    
    # Footer mejorado
    st.markdown("---")
    st.markdown("""
    <div style="text-align: center; color: #666; padding: 2rem; background-color: #f8f9fa; border-radius: 10px; margin-top: 2rem;">
        <h4>üî¨ Detector de C√°ncer de Piel</h4>
        <p><strong>Tecnolog√≠as utilizadas:</strong> TensorFlow ‚Ä¢ Streamlit ‚Ä¢ Python ‚Ä¢ OpenCV</p>
        <p><strong>‚ö†Ô∏è Aviso m√©dico importante:</strong> Esta herramienta es solo para fines educativos e informativos. 
        No constituye asesoramiento m√©dico y no debe utilizarse como sustituto del diagn√≥stico profesional.</p>
        <p><strong>ü©∫ Recomendaci√≥n:</strong> Siempre consulte con un dermat√≥logo certificado para evaluaciones m√©dicas.</p>
        <p><small>Versi√≥n 2.0 ‚Ä¢ √öltima actualizaci√≥n: Julio 2025</small></p>
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    # Configurar logging de TensorFlow antes de ejecutar la app
    tf.get_logger().setLevel('ERROR')
    os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'
    
    main()
